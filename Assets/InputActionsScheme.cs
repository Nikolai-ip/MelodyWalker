//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/InputActionsScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputActionsScheme.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputActionsScheme: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputActionsScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionsScheme"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f6ae17bf-3c99-4933-beb1-42946bb3f78f"",
            ""actions"": [
                {
                    ""name"": ""Note1"",
                    ""type"": ""Button"",
                    ""id"": ""a7d9eadb-641e-4ed2-b825-ca6550dbba1f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note2"",
                    ""type"": ""Button"",
                    ""id"": ""047b6088-53f7-4ed1-996a-9564529957a0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note3"",
                    ""type"": ""Button"",
                    ""id"": ""f566d696-70ac-4861-abf7-f75615d97294"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note4"",
                    ""type"": ""Button"",
                    ""id"": ""29813e53-60ee-4412-8cc8-5cbec10c6dfb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note5"",
                    ""type"": ""Button"",
                    ""id"": ""c4f25591-40dd-4edf-ac14-176a9b8d1753"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note6"",
                    ""type"": ""Button"",
                    ""id"": ""8dd4df1a-78bf-4e01-ae75-aea0a220cfa0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Note7"",
                    ""type"": ""Button"",
                    ""id"": ""4f07c293-07cc-4815-973e-b37731a7236d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ApplyCast"",
                    ""type"": ""Button"",
                    ""id"": ""5dd983f5-f966-4ddc-b69d-7506cc8b37f7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelCast"",
                    ""type"": ""Button"",
                    ""id"": ""3e9a98df-55b9-46da-adb6-a0b6886f9a1e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""a03500b2-20c3-4d79-9ea1-831d7a7c6d67"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ca4f319-8347-44de-961b-3e8c16db05df"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""230b27ae-eafc-4145-9dc2-681011e72b12"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46583a1d-f2c6-455d-8b19-03064b7be48e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29311aa0-ed96-4e48-b6e3-7a28452e4c35"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c01293e-5dfd-4346-bc6e-05ad8e485b43"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fa8f5b6-483a-4b38-a6bd-7bc9519a53bf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""365727c4-278c-4008-b80d-96efaca7adc9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Note7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa3f1172-0762-4124-ba6e-3f85bd1034c1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ApplyCast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""169f19b6-f3f4-4a39-84ab-2d89f24390e6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelCast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""529beaf5-1e12-4df2-b8f1-8ca067365b31"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Note1 = m_Player.FindAction("Note1", throwIfNotFound: true);
        m_Player_Note2 = m_Player.FindAction("Note2", throwIfNotFound: true);
        m_Player_Note3 = m_Player.FindAction("Note3", throwIfNotFound: true);
        m_Player_Note4 = m_Player.FindAction("Note4", throwIfNotFound: true);
        m_Player_Note5 = m_Player.FindAction("Note5", throwIfNotFound: true);
        m_Player_Note6 = m_Player.FindAction("Note6", throwIfNotFound: true);
        m_Player_Note7 = m_Player.FindAction("Note7", throwIfNotFound: true);
        m_Player_ApplyCast = m_Player.FindAction("ApplyCast", throwIfNotFound: true);
        m_Player_CancelCast = m_Player.FindAction("CancelCast", throwIfNotFound: true);
        m_Player_MouseScreenPosition = m_Player.FindAction("MouseScreenPosition", throwIfNotFound: true);
    }

    ~@InputActionsScheme()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputActionsScheme.Player.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Note1;
    private readonly InputAction m_Player_Note2;
    private readonly InputAction m_Player_Note3;
    private readonly InputAction m_Player_Note4;
    private readonly InputAction m_Player_Note5;
    private readonly InputAction m_Player_Note6;
    private readonly InputAction m_Player_Note7;
    private readonly InputAction m_Player_ApplyCast;
    private readonly InputAction m_Player_CancelCast;
    private readonly InputAction m_Player_MouseScreenPosition;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player".
    /// </summary>
    public struct PlayerActions
    {
        private @InputActionsScheme m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerActions(@InputActionsScheme wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player/Note1".
        /// </summary>
        public InputAction @Note1 => m_Wrapper.m_Player_Note1;
        /// <summary>
        /// Provides access to the underlying input action "Player/Note2".
        /// </summary>
        public InputAction @Note2 => m_Wrapper.m_Player_Note2;
        /// <summary>
        /// Provides access to the underlying input action "Player/Note3".
        /// </summary>
        public InputAction @Note3 => m_Wrapper.m_Player_Note3;
        /// <summary>
        /// Provides access to the underlying input action "Player/Note4".
        /// </summary>
        public InputAction @Note4 => m_Wrapper.m_Player_Note4;
        /// <summary>
        /// Provides access to the underlying input action "Player/Note5".
        /// </summary>
        public InputAction @Note5 => m_Wrapper.m_Player_Note5;
        /// <summary>
        /// Provides access to the underlying input action "Player/Note6".
        /// </summary>
        public InputAction @Note6 => m_Wrapper.m_Player_Note6;
        /// <summary>
        /// Provides access to the underlying input action "Player/Note7".
        /// </summary>
        public InputAction @Note7 => m_Wrapper.m_Player_Note7;
        /// <summary>
        /// Provides access to the underlying input action "Player/ApplyCast".
        /// </summary>
        public InputAction @ApplyCast => m_Wrapper.m_Player_ApplyCast;
        /// <summary>
        /// Provides access to the underlying input action "Player/CancelCast".
        /// </summary>
        public InputAction @CancelCast => m_Wrapper.m_Player_CancelCast;
        /// <summary>
        /// Provides access to the underlying input action "Player/MouseScreenPosition".
        /// </summary>
        public InputAction @MouseScreenPosition => m_Wrapper.m_Player_MouseScreenPosition;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Note1.started += instance.OnNote1;
            @Note1.performed += instance.OnNote1;
            @Note1.canceled += instance.OnNote1;
            @Note2.started += instance.OnNote2;
            @Note2.performed += instance.OnNote2;
            @Note2.canceled += instance.OnNote2;
            @Note3.started += instance.OnNote3;
            @Note3.performed += instance.OnNote3;
            @Note3.canceled += instance.OnNote3;
            @Note4.started += instance.OnNote4;
            @Note4.performed += instance.OnNote4;
            @Note4.canceled += instance.OnNote4;
            @Note5.started += instance.OnNote5;
            @Note5.performed += instance.OnNote5;
            @Note5.canceled += instance.OnNote5;
            @Note6.started += instance.OnNote6;
            @Note6.performed += instance.OnNote6;
            @Note6.canceled += instance.OnNote6;
            @Note7.started += instance.OnNote7;
            @Note7.performed += instance.OnNote7;
            @Note7.canceled += instance.OnNote7;
            @ApplyCast.started += instance.OnApplyCast;
            @ApplyCast.performed += instance.OnApplyCast;
            @ApplyCast.canceled += instance.OnApplyCast;
            @CancelCast.started += instance.OnCancelCast;
            @CancelCast.performed += instance.OnCancelCast;
            @CancelCast.canceled += instance.OnCancelCast;
            @MouseScreenPosition.started += instance.OnMouseScreenPosition;
            @MouseScreenPosition.performed += instance.OnMouseScreenPosition;
            @MouseScreenPosition.canceled += instance.OnMouseScreenPosition;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Note1.started -= instance.OnNote1;
            @Note1.performed -= instance.OnNote1;
            @Note1.canceled -= instance.OnNote1;
            @Note2.started -= instance.OnNote2;
            @Note2.performed -= instance.OnNote2;
            @Note2.canceled -= instance.OnNote2;
            @Note3.started -= instance.OnNote3;
            @Note3.performed -= instance.OnNote3;
            @Note3.canceled -= instance.OnNote3;
            @Note4.started -= instance.OnNote4;
            @Note4.performed -= instance.OnNote4;
            @Note4.canceled -= instance.OnNote4;
            @Note5.started -= instance.OnNote5;
            @Note5.performed -= instance.OnNote5;
            @Note5.canceled -= instance.OnNote5;
            @Note6.started -= instance.OnNote6;
            @Note6.performed -= instance.OnNote6;
            @Note6.canceled -= instance.OnNote6;
            @Note7.started -= instance.OnNote7;
            @Note7.performed -= instance.OnNote7;
            @Note7.canceled -= instance.OnNote7;
            @ApplyCast.started -= instance.OnApplyCast;
            @ApplyCast.performed -= instance.OnApplyCast;
            @ApplyCast.canceled -= instance.OnApplyCast;
            @CancelCast.started -= instance.OnCancelCast;
            @CancelCast.performed -= instance.OnCancelCast;
            @CancelCast.canceled -= instance.OnCancelCast;
            @MouseScreenPosition.started -= instance.OnMouseScreenPosition;
            @MouseScreenPosition.performed -= instance.OnMouseScreenPosition;
            @MouseScreenPosition.canceled -= instance.OnMouseScreenPosition;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />.
        /// </summary>
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerActions" /> instance referencing this action map.
    /// </summary>
    public PlayerActions @Player => new PlayerActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
    /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
    public interface IPlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Note1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNote1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Note2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNote2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Note3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNote3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Note4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNote4(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Note5" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNote5(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Note6" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNote6(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Note7" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNote7(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ApplyCast" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnApplyCast(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CancelCast" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancelCast(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MouseScreenPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseScreenPosition(InputAction.CallbackContext context);
    }
}
